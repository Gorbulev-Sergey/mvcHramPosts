// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvcHramPosts.Data;

namespace mvcHramPosts.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("mvcHramPosts.Models.comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("postID");

                    b.Property<string>("text");

                    b.Property<DateTime>("updated");

                    b.Property<string>("userId");

                    b.Property<string>("userName");

                    b.HasKey("ID");

                    b.HasIndex("postID");

                    b.HasIndex("userId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("mvcHramPosts.Models.image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("imageAlbumID");

                    b.Property<int>("postID");

                    b.Property<string>("title");

                    b.Property<DateTime>("updated");

                    b.Property<string>("url");

                    b.HasKey("ID");

                    b.HasIndex("imageAlbumID");

                    b.HasIndex("postID");

                    b.ToTable("image");
                });

            modelBuilder.Entity("mvcHramPosts.Models.imageAlbum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cover_image");

                    b.Property<DateTime>("created");

                    b.Property<string>("title");

                    b.Property<DateTime>("updated");

                    b.Property<int>("userId");

                    b.Property<string>("userId1");

                    b.HasKey("ID");

                    b.HasIndex("userId1");

                    b.ToTable("imageAlbums");
                });

            modelBuilder.Entity("mvcHramPosts.Models.like", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("postID");

                    b.Property<DateTime>("updated");

                    b.Property<string>("userId");

                    b.HasKey("ID");

                    b.HasIndex("postID");

                    b.HasIndex("userId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("mvcHramPosts.Models.post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content");

                    b.Property<string>("cover_image");

                    b.Property<DateTime>("created");

                    b.Property<string>("short_content");

                    b.Property<string>("title");

                    b.Property<int>("type");

                    b.Property<DateTime>("updated");

                    b.Property<string>("userId");

                    b.HasKey("ID");

                    b.HasIndex("userId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("mvcHramPosts.Models.tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("postID");

                    b.Property<string>("text");

                    b.Property<DateTime>("updated");

                    b.HasKey("ID");

                    b.HasIndex("postID");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("mvcHramPosts.Models.user", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("mvcHramPosts.Models.video", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("postID");

                    b.Property<DateTime>("updated");

                    b.Property<string>("url");

                    b.HasKey("ID");

                    b.HasIndex("postID");

                    b.ToTable("video");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvcHramPosts.Models.comment", b =>
                {
                    b.HasOne("mvcHramPosts.Models.post")
                        .WithMany("comments")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany("comments")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("mvcHramPosts.Models.image", b =>
                {
                    b.HasOne("mvcHramPosts.Models.imageAlbum")
                        .WithMany("images")
                        .HasForeignKey("imageAlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvcHramPosts.Models.post")
                        .WithMany("images")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvcHramPosts.Models.imageAlbum", b =>
                {
                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany("imageAlbums")
                        .HasForeignKey("userId1");
                });

            modelBuilder.Entity("mvcHramPosts.Models.like", b =>
                {
                    b.HasOne("mvcHramPosts.Models.post")
                        .WithMany("likes")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany("likes")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("mvcHramPosts.Models.post", b =>
                {
                    b.HasOne("mvcHramPosts.Models.user")
                        .WithMany("posts")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("mvcHramPosts.Models.tag", b =>
                {
                    b.HasOne("mvcHramPosts.Models.post")
                        .WithMany("tags")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvcHramPosts.Models.video", b =>
                {
                    b.HasOne("mvcHramPosts.Models.post")
                        .WithMany("videos")
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
